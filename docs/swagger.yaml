basePath: /api
definitions:
  models.AnswerOption:
    properties:
      id:
        type: integer
      question_id:
        type: integer
      string_answer:
        type: string
    type: object
  models.EvaluateTeacher:
    properties:
      class:
        type: string
      id:
        type: integer
      subject:
        $ref: '#/definitions/models.Subject'
      subject_id:
        type: integer
      teacher_id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
    type: object
  models.Level:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  models.Major:
    properties:
      code:
        type: string
      id:
        type: integer
      name:
        type: string
    type: object
  models.Question:
    properties:
      answer_option:
        items:
          $ref: '#/definitions/models.AnswerOption'
        type: array
      id:
        type: integer
      question:
        type: string
      questionnaire_id:
        type: integer
      user_response:
        items:
          $ref: '#/definitions/models.UserAnswer'
        type: array
      with_option:
        type: integer
    type: object
  models.Questionnaire:
    properties:
      completor:
        items:
          $ref: '#/definitions/models.User'
        type: array
      created_by:
        type: integer
      createdAt:
        type: string
      creator:
        $ref: '#/definitions/models.User'
      deletedAt:
        type: string
      description:
        type: string
      id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/models.Question'
        type: array
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
      type:
        type: string
      updatedAt:
        type: string
    type: object
  models.Subject:
    properties:
      code:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      major_id:
        type: integer
      name:
        type: string
      student:
        items:
          $ref: '#/definitions/models.User'
        type: array
      teacher_class:
        items:
          $ref: '#/definitions/models.TeacherSubject'
        type: array
    type: object
  models.Tag:
    properties:
      id:
        type: integer
      name:
        type: string
      value:
        type: string
    type: object
  models.TeacherSubject:
    properties:
      class:
        type: string
      id:
        type: integer
      subject:
        $ref: '#/definitions/models.Subject'
      subject_id:
        type: integer
      teacher:
        $ref: '#/definitions/models.User'
      teacher_id:
        type: integer
    type: object
  models.Token:
    properties:
      access_token:
        type: string
      refresh_token:
        type: string
    type: object
  models.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        type: string
      email:
        type: string
      id:
        type: integer
      level:
        $ref: '#/definitions/models.Level'
      level_id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      major_id:
        type: integer
      name:
        type: string
      password:
        type: string
      status:
        type: integer
      subject:
        items:
          $ref: '#/definitions/models.Subject'
        type: array
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      teacher_subject:
        items:
          $ref: '#/definitions/models.TeacherSubject'
        type: array
      updatedAt:
        type: string
    type: object
  models.UserAnswer:
    properties:
      answer:
        type: string
      evaluate_teacher:
        $ref: '#/definitions/models.EvaluateTeacher'
      evaluate_teacher_id:
        type: integer
      id:
        type: integer
      question_id:
        type: integer
      user:
        $ref: '#/definitions/models.User'
      user_id:
        type: integer
    type: object
  request.Answer:
    properties:
      answers:
        items:
          $ref: '#/definitions/request.UserAnswer'
        type: array
      quest:
        $ref: '#/definitions/models.Questionnaire'
      user:
        $ref: '#/definitions/models.User'
    type: object
  request.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  request.SubjectRequest:
    properties:
      code:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
      teacher_class:
        items:
          $ref: '#/definitions/request.TeacherSubject'
        type: array
    type: object
  request.Teacher:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  request.TeacherSubject:
    properties:
      class:
        type: string
      teacher:
        $ref: '#/definitions/request.Teacher'
    type: object
  request.UserAnswer:
    properties:
      answer:
        type: string
      id:
        type: integer
      question_id:
        type: integer
    type: object
  response.AvailableQuestList:
    properties:
      created_by:
        $ref: '#/definitions/models.User'
      description:
        type: string
      id:
        type: integer
      title:
        type: string
    type: object
  response.Error:
    properties:
      error: {}
      message:
        type: string
    type: object
  response.MessageData:
    properties:
      data: {}
      message:
        type: string
    type: object
  response.MessageOnly:
    properties:
      message:
        type: string
    type: object
  response.QuestList:
    properties:
      description:
        type: string
      id:
        type: integer
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      title:
        type: string
    type: object
  response.QuestResponses:
    properties:
      id:
        type: integer
      questions:
        items:
          $ref: '#/definitions/response.Respondent'
        type: array
      title:
        type: string
    type: object
  response.Respondent:
    properties:
      id:
        type: integer
      number_of_response:
        type: integer
      question:
        type: string
      user_response:
        items:
          $ref: '#/definitions/response.UserAnswer'
        type: array
    type: object
  response.Student:
    properties:
      email:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
    type: object
  response.Subject:
    properties:
      code:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
      student:
        items:
          $ref: '#/definitions/response.Student'
        type: array
      teacher_class:
        items:
          $ref: '#/definitions/response.TeacherClass'
        type: array
    type: object
  response.SubjectTeacher:
    properties:
      class:
        type: string
      subject:
        $ref: '#/definitions/response.SubjectWithoutTeacher'
    type: object
  response.SubjectWithStudent:
    properties:
      code:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
      student:
        items:
          $ref: '#/definitions/response.Student'
        type: array
    type: object
  response.SubjectWithTeacher:
    properties:
      code:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
      teacher_class:
        items:
          $ref: '#/definitions/response.TeacherClass'
        type: array
    type: object
  response.SubjectWithoutTeacher:
    properties:
      code:
        type: string
      id:
        type: integer
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
    type: object
  response.Teacher:
    properties:
      id:
        type: integer
      name:
        type: string
    type: object
  response.TeacherClass:
    properties:
      class:
        type: string
      teacher:
        $ref: '#/definitions/response.Teacher'
    type: object
  response.UserAnswer:
    properties:
      answer:
        type: string
      id:
        type: integer
      question_id:
        type: integer
      user:
        $ref: '#/definitions/response.UserList'
    type: object
  response.UserDetails:
    properties:
      email:
        type: string
      id:
        type: integer
      level:
        $ref: '#/definitions/models.Level'
      major:
        $ref: '#/definitions/models.Major'
      name:
        type: string
      status:
        type: integer
      subject:
        items:
          $ref: '#/definitions/response.Subject'
        type: array
      tags:
        items:
          $ref: '#/definitions/models.Tag'
        type: array
      teacher_subject:
        items:
          $ref: '#/definitions/response.SubjectTeacher'
        type: array
    type: object
  response.UserList:
    properties:
      email:
        type: string
      id:
        type: integer
      level:
        $ref: '#/definitions/models.Level'
      name:
        type: string
      status:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: server API for Question Board Application.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  title: Question Board
  version: "1.0"
paths:
  /admin/major:
    get:
      description: Route Path for Get List of Major, for Administrator only.
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Major'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get All Major
      tags:
      - Major
    post:
      consumes:
      - application/json
      description: Route Path for Insert New Major, for Administrator only.
      parameters:
      - description: send request major code and major name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Major'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Create New Major
      tags:
      - Major
  /admin/major/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Route Path for Delete Major, for Administrator only.
      parameters:
      - description: major id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Delete Major
      tags:
      - Major
  /admin/major/{id}/update:
    put:
      consumes:
      - application/json
      description: Route Path for Update Major, for Administrator only.
      parameters:
      - description: major id
        in: path
        name: id
        required: true
        type: integer
      - description: send request major code and major name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Major'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Update Major
      tags:
      - Major
  /admin/subject:
    get:
      description: Route Path for Get List of Subject, for Administrator only.
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.SubjectWithoutTeacher'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get All Subject
      tags:
      - Subject
    post:
      consumes:
      - application/json
      description: Route Path for Insert New Subject, for Administrator only.
      parameters:
      - description: send request subject code and subject name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.SubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Create New Subject
      tags:
      - Subject
  /admin/subject/{id}:
    get:
      description: Route Path for Get Subject Details By ID.
      parameters:
      - description: subject id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Subject'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get Subject By ID
      tags:
      - Subject
  /admin/subject/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Route Path for Delete Subject, for Administrator only.
      parameters:
      - description: subject id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Delete Subject
      tags:
      - Subject
  /admin/subject/{id}/update:
    put:
      consumes:
      - application/json
      description: Route Path for Update Subject, for Administrator only.
      parameters:
      - description: subject id
        in: path
        name: id
        required: true
        type: integer
      - description: send request subject code and subject name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.SubjectRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Update Subject
      tags:
      - Subject
  /admin/tag:
    get:
      description: Route Path for Get List of Tag, for Administrator only.
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/models.Tag'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get All Tag
      tags:
      - Tag
    post:
      consumes:
      - application/json
      description: Route Path for Insert New Tag, for Administrator only.
      parameters:
      - description: send request tag code and tag name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Create New Tag
      tags:
      - Tag
  /admin/tag/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Route Path for Delete Tag, for Administrator only.
      parameters:
      - description: tag id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Delete Tag
      tags:
      - Tag
  /admin/tag/{id}/update:
    put:
      consumes:
      - application/json
      description: Route Path for Update Tag, for Administrator only.
      parameters:
      - description: tag id
        in: path
        name: id
        required: true
        type: integer
      - description: send request tag code and tag name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Tag'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Update Tag
      tags:
      - Tag
  /admin/user:
    get:
      description: Route Path for Get List of User, for Administrator only.
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.UserList'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get All User
      tags:
      - User
    post:
      consumes:
      - application/json
      description: Route Path for Insert New User, for Administrator only.
      parameters:
      - description: send request user code and user name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Create New User
      tags:
      - User
  /admin/user/{id}:
    get:
      description: Route Path for Get User Details By ID, for Administrator only.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  $ref: '#/definitions/response.UserDetails'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get User By ID
      tags:
      - User
  /admin/user/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Route Path for Delete User, for Administrator only.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Delete User
      tags:
      - User
  /admin/user/{id}/update:
    put:
      consumes:
      - application/json
      description: Route Path for Update User, for Administrator only.
      parameters:
      - description: user id
        in: path
        name: id
        required: true
        type: integer
      - description: send request user code and user name
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Update User
      tags:
      - User
  /login:
    post:
      consumes:
      - application/json
      description: Login and get Authorization Token
      parameters:
      - description: send request email, password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.UserDetails'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Login
      tags:
      - Authorization
  /quest:
    get:
      description: Route Path for Get List of Quest By User ID.
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.QuestList'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get All Quest
      tags:
      - Questionnaire
    post:
      consumes:
      - application/json
      description: Route Path for Insert New Quest.
      parameters:
      - description: send quest data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Questionnaire'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Create New Quest
      tags:
      - Questionnaire
  /quest/{id}:
    get:
      description: Route Path for Get Quest Details By ID.
      parameters:
      - description: quest id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get Quest Details By ID
      tags:
      - Questionnaire
  /quest/{id}/delete:
    delete:
      consumes:
      - application/json
      description: Route Path for Delete Quest.
      parameters:
      - description: quest id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Delete Quest
      tags:
      - Questionnaire
  /quest/{id}/response:
    get:
      description: Route Path for Get Quest Response By Quest ID.
      parameters:
      - description: quest id
        in: path
        name: id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  $ref: '#/definitions/response.QuestResponses'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Quest Response By Quest ID
      tags:
      - Questionnaire
  /quest/{id}/update:
    put:
      consumes:
      - application/json
      description: Route Path for Update Questionnaire.
      parameters:
      - description: quest id
        in: path
        name: id
        required: true
        type: integer
      - description: send quest data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Questionnaire'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Update Questionnaire
      tags:
      - Questionnaire
  /quest/answer:
    post:
      consumes:
      - application/json
      description: Route Path for Answer Quest.
      parameters:
      - description: send answer, quest, and user data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Answer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Answer Quest
      tags:
      - Questionnaire
  /quest/available:
    get:
      description: Route Path for Get List of Quest with User Tag Filter.
      parameters:
      - description: send logged in user data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.AvailableQuestList'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get All Quest with User Tag Filter
      tags:
      - Questionnaire
  /refresh_token:
    post:
      consumes:
      - application/json
      description: Route Path for Get New Access Token
      parameters:
      - description: send request access_token, refresh_token
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.Token'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Token'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.Error'
      summary: Refresh Token
      tags:
      - Authorization
  /student/evaluate:
    get:
      description: Route Path for Get List of Evaluation Quest with Subject ID and
        Class.
      parameters:
      - description: class
        in: query
        name: class
        required: true
        type: string
      - description: subject id
        in: query
        name: subject_id
        required: true
        type: integer
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  $ref: '#/definitions/response.QuestList'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get Evaluate Quest
      tags:
      - Evaluate
    post:
      consumes:
      - application/json
      description: Route Path for Answer Evaluate Quesition.
      parameters:
      - description: teacher id
        in: query
        name: teacher_id
        type: integer
      - description: subject id
        in: query
        name: subject_id
        type: integer
      - description: send quest data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/request.Answer'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Create New Quest
      tags:
      - Questionnaire
  /student/subject:
    get:
      description: Route Path for Get List of Student Subject, for Student only.
      parameters:
      - description: user data for fetch subject
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.SubjectWithTeacher'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get Student Subject
      tags:
      - Subject
  /teacher/subject:
    get:
      description: Route Path for Get List of Teacher Subject, for Teacher only.
      parameters:
      - description: user data for fetch subject
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/models.User'
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.MessageData'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.SubjectWithStudent'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.MessageOnly'
        "417":
          description: Expectation Failed
          schema:
            $ref: '#/definitions/response.Error'
      security:
      - ApiKey: []
      summary: Get Teacher Subject
      tags:
      - Subject
securityDefinitions:
  ApiKey:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
