// Code generated by mockery v2.10.4. DO NOT EDIT.

package mocks

import (
	models "go-question-board/internal/core/models"

	mock "github.com/stretchr/testify/mock"
)

// EvaluateRepository is an autogenerated mock type for the EvaluateRepository type
type EvaluateRepository struct {
	mock.Mock
}

// Evaluate provides a mock function with given fields: _a0, _a1
func (_m *EvaluateRepository) Evaluate(_a0 models.Questionnaire, _a1 []models.UserAnswer) error {
	ret := _m.Called(_a0, _a1)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Questionnaire, []models.UserAnswer) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetEvaluateQuest provides a mock function with given fields: _a0, _a1
func (_m *EvaluateRepository) GetEvaluateQuest(_a0 int, _a1 string) (*models.Subject, *models.Questionnaire, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *models.Subject
	if rf, ok := ret.Get(0).(func(int, string) *models.Subject); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Subject)
		}
	}

	var r1 *models.Questionnaire
	if rf, ok := ret.Get(1).(func(int, string) *models.Questionnaire); ok {
		r1 = rf(_a0, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*models.Questionnaire)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, string) error); ok {
		r2 = rf(_a0, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetEvaluateResponse provides a mock function with given fields: _a0
func (_m *EvaluateRepository) GetEvaluateResponse(_a0 int) (*[]models.Questionnaire, error) {
	ret := _m.Called(_a0)

	var r0 *[]models.Questionnaire
	if rf, ok := ret.Get(0).(func(int) *[]models.Questionnaire); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*[]models.Questionnaire)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
